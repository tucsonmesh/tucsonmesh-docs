<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Networking on Tucson Mesh Docs</title><link>https://mackncheesiest.github.io/tucsonmesh-docs/networking/</link><description>Recent content in Networking on Tucson Mesh Docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://mackncheesiest.github.io/tucsonmesh-docs/networking/index.xml" rel="self" type="application/rss+xml"/><item><title>10-69-net Network</title><link>https://mackncheesiest.github.io/tucsonmesh-docs/networking/10-69-net-network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mackncheesiest.github.io/tucsonmesh-docs/networking/10-69-net-network/</guid><description>The 10-69 network is used to connect nodes on NYC Mesh. Every mesh router at every node on the mesh gets an IP address from 10.69.0.0/16. Each router&amp;rsquo;s IP address can be computed from the router&amp;rsquo;s node number. The 10-69 network supports up to two routers per node.
The 10-69 network allows for routers at nodes to auto-discover each other using OSPF with minimal configuration. This makes it possible for anyone to join the mesh with almost no intervention from other mesh members.</description></item><item><title>BGP</title><link>https://mackncheesiest.github.io/tucsonmesh-docs/networking/bgp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mackncheesiest.github.io/tucsonmesh-docs/networking/bgp/</guid><description>The Border Gateway Protocol (BGP) is an inter-Autonomous System routing protocol.
NYC Mesh no longer uses BGP within the mesh between neighbors / members. Use of BGP within the mesh was too static for the changing network, lacked some &amp;ldquo;automatic&amp;rdquo; properties, and made it difficult to train new people.
Use outside NYC Mesh BGP is a popular dynamic routing protocol as it is relatively simple to configure, scales well and enjoys support across multiple hardware and software vendors.</description></item><item><title>Classes</title><link>https://mackncheesiest.github.io/tucsonmesh-docs/networking/classes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mackncheesiest.github.io/tucsonmesh-docs/networking/classes/</guid><description>We have presented a few classes on network concepts and training. Here is a list of slides and videos we have made for reference.
Networking 101 version 1, by Zach Giles, Early 2017 Slides
Networking 101 version 2, by Zach Giles, December 2018 Slides, Video</description></item><item><title>DNS</title><link>https://mackncheesiest.github.io/tucsonmesh-docs/networking/dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mackncheesiest.github.io/tucsonmesh-docs/networking/dns/</guid><description>DNS Infrastructure NYCMesh maintains an internal DNS with the &amp;ldquo;fake&amp;rdquo; top-level domain (TLD) of .mesh ( dot mesh ).
Through this, services can be hosted, internal sites, etc.
Use 10.10.10.10 for your DNS server.
DNS configuration The DNS is hosted using standard DNS zones which are made available through the Knot Resolver and Knot DNS Server.
The zone and scripts are made available via git. Once the master branch is updated, the DNS servers will periodically update and refresh their configuration.</description></item><item><title>Hubs</title><link>https://mackncheesiest.github.io/tucsonmesh-docs/networking/hubs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mackncheesiest.github.io/tucsonmesh-docs/networking/hubs/</guid><description>Hubs provide connectivity for many nodes in a neighborhood. They come in three different sizes: small, medium, and large. These categories are not strict, and you will find many variants in the field. You can modify your hub to suit your needs and the needs of other mesh members in your area.
Small The smallest possible hub is a standard node, an OmniTik 5 POE ac, with an added LiteBeam AC connected to a sector antenna at another hub or supernode to give it a reliable upstream connection.</description></item><item><title>IP Mapping Idea</title><link>https://mackncheesiest.github.io/tucsonmesh-docs/networking/ipmappingidea/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mackncheesiest.github.io/tucsonmesh-docs/networking/ipmappingidea/</guid><description>Hi #architecture, I&amp;#39;d like to propose an algorithm for making a Node Number to IP mapping programmatically. This is not a *new* idea. Several of us have thought about it and taken a stab at it, and I&amp;#39;d like to officially see if we can all agree on one. Also, the below ideas represent generally a few models of what can be done. There are infinite variations, but the generally follow the below pattern.</description></item><item><title>Mesh Design</title><link>https://mackncheesiest.github.io/tucsonmesh-docs/networking/mesh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mackncheesiest.github.io/tucsonmesh-docs/networking/mesh/</guid><description>NYC Mesh is designed and run as a mesh network. As a mesh, various nodes connect to each other in a non-hierarchical way, with traffic flowing in either direction, and rerouting traffic as nodes fail.
As with all mesh networks, we must balance between becoming too much of a &amp;ldquo;star&amp;rdquo; topology vs a &amp;ldquo;mesh&amp;rdquo; topology.
Neither is fully practical &amp;ndash; Not literally every node next to each other can all connect to each other, nor can we sustain unlimited nodes connecting to one rooftop.</description></item><item><title>NTP Network Time Protocol</title><link>https://mackncheesiest.github.io/tucsonmesh-docs/networking/ntp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mackncheesiest.github.io/tucsonmesh-docs/networking/ntp/</guid><description>NTP Infrastructure NYCMesh does not have yet a Mesh NTP server but 2 mesh members are providing NTP function on their server.
Use 10.10.10.123 as your NTP server address.
What is NTP The Netwok Time Protocol is a &amp;ldquo;network&amp;rdquo; protocol for devices to sych their clocks. See Wiki
IPs 10.10.10.123 - NTP for the mesh ( Use this one )
NTP stats and status Here are some stats on the NTP servers: NTP server hosted at SN3 NTP server hosted in Manhattan (it has a Stratum 1 receiver).</description></item><item><title>OSPF</title><link>https://mackncheesiest.github.io/tucsonmesh-docs/networking/ospf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mackncheesiest.github.io/tucsonmesh-docs/networking/ospf/</guid><description>Open Shortest Path First (OSPF) is a dynamic routing protocol. It uses a link state routing algorithm, thus, it performs functions such as detecting topology changes and link failures. It generally converges quickly and in a loop-free manner. OSPF is often used in corporate networks within a datacenter or building.
While OSPF is not generally used as a mesh protocol across a city, it has properties similar to other mesh protocols such as use of link state routing algorithms and auto-convergence.</description></item><item><title>Public ASN Peering</title><link>https://mackncheesiest.github.io/tucsonmesh-docs/networking/peering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mackncheesiest.github.io/tucsonmesh-docs/networking/peering/</guid><description>NYC Mesh operates AS395853 Our peering Policy is Yes Please contact us to peer with our network.
Note this this is our Public ASN, not the Mesh Network itself.
This community-run public network supplies NYC Mesh with net-neutral internet connectivity to support the community. If you would like to join the Mesh Network, please visit our Join Page make use of this network.
Peering Policy
NYC Mesh has an open peering policy.</description></item><item><title>Supernode Architecture</title><link>https://mackncheesiest.github.io/tucsonmesh-docs/networking/supernode-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mackncheesiest.github.io/tucsonmesh-docs/networking/supernode-architecture/</guid><description>Goals of this documents Supernode routing / goals Supernode sample architectures Plan to get us to this architecture Supernode routing / goals &amp;ldquo;If you can get to a supernode, you can get to the rest of the mesh ( and the internet ).&amp;rdquo;
A supernode should be the regional authority on how to get to its region, other regions, and the internet. Translate region-local rooftop-to-rooftop protocol routes to standard routes for other regions and vice versa.</description></item><item><title>VPN</title><link>https://mackncheesiest.github.io/tucsonmesh-docs/networking/vpn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mackncheesiest.github.io/tucsonmesh-docs/networking/vpn/</guid><description>The NYC Mesh Virtual Private Network (VPN) is a system that enables a computer that is physically disconnected from the rest of the NYC Mesh network (e.g., because it is too distant from existing nodes) to access the network. Put another way, it extends the NYC Mesh network to computers that are not physically part of the mesh. This is used for a number of different purposes, including to provide access to intra-mesh services, ease new node installations, bootstrap new neighborhoods, and more.</description></item><item><title>VPN - L2TP/IPsec</title><link>https://mackncheesiest.github.io/tucsonmesh-docs/networking/vpnl2tpipsec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mackncheesiest.github.io/tucsonmesh-docs/networking/vpnl2tpipsec/</guid><description>L2TP/IPSec is a common general-purpose VPN protocol that work with most platforms. For example, computers running Windows, macOS, iPhones, and Android devices all support this type of VPN out-of-the-box. This type of VPN is a little bit oldschool, in that it is typically found in enterprise corporate environments, which is part of what makes it so ubiquitous. For this reason, we have decided to provide and endpoint of this protocol.</description></item><item><title>VPN - L2TP/IPsec Req.</title><link>https://mackncheesiest.github.io/tucsonmesh-docs/networking/vpnl2tpipsecid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mackncheesiest.github.io/tucsonmesh-docs/networking/vpnl2tpipsecid/</guid><description>NYC Mesh maintains some common VPN infrastructure for use by active mesh members.
Please feel free to use the VPNs. However, please note that NYC Mesh is not a commercial VPN provider or reseller, nor are we trying to achieve an Internet-based darknet. The VPN service is subject to change and/or breakage at any time. Do not rely on NYC Mesh’s VPN service as your primary or critical VPN provider. Also, as with all NYC Mesh resources, do not abuse the VPN service or the access it provides.</description></item><item><title>VPN - WireGuard</title><link>https://mackncheesiest.github.io/tucsonmesh-docs/networking/vpnwireguard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mackncheesiest.github.io/tucsonmesh-docs/networking/vpnwireguard/</guid><description>WireGuard is a new, simple, and fast VPN implementation and protocol. For comparison, the older L2TP/IPsec VPNs typically will achieve about 100Mbps, but WireGuard VPNs may reach speeds upward of 300-400Mbps on the same hardware, or higher on a high-end workstation.
In addition to its speed, WireGuard has some great features such as built-in roaming (a single encrypted packet moves the tunnel to your new IP), cryptokey routing, and formal cryptographic verification.</description></item><item><title>VPN - WireGuard + OSPF</title><link>https://mackncheesiest.github.io/tucsonmesh-docs/networking/vpnwireguardospf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mackncheesiest.github.io/tucsonmesh-docs/networking/vpnwireguardospf/</guid><description>WireGuard is generally described on another page, here: [VPN - Wireguard]({{ relref &amp;ldquo;vpnwireguard.md&amp;rdquo;}}). This page is about what is needed to configure WireGuard for routing over the VPN; especially with a focus on OSPF.
A Note on Cryptokey Routing It&amp;rsquo;s worth a section to touch on the cryptokey routing feature of WireGuard and how it works with the mesh.
All WireGuard nodes list their peers in a configuration file. Among the peer configuration is a public key and a list of acceptable IP ranges for the peer.</description></item></channel></rss>